---
- name: Launch and configure EC2 instances and ELB
  hosts: localhost
  gather_facts: no
  vars_files:
    - ../../vars/aws_vars.yml
  tasks:
    - name: Launch EC2 instances
      amazon.aws.ec2_instance:
        key_name: "{{ aws_key_name }}"  # Ensure this matches the key pair name in AWS
        instance_type: "{{ aws_instance_type }}"
        image_id: "{{ ubuntu_ami }}"  # Use the correct AMI ID for Ubuntu
        region: "{{ aws_region }}"
        wait: yes
        count: 3
        vpc_subnet_id: "{{ aws_subnet_id }}"
        security_group: "{{ aws_security_group }}"
        tags:
          Name: AnsibleProvisionedServer
      register: ec2

    - name: Wait until the instances are running
      amazon.aws.ec2_instance_info:
        region: "{{ aws_region }}"
        instance_ids: "{{ ec2.instance_ids }}"
      register: instance_info
      until: instance_info.instances[0].state.name == 'running'
      retries: 15
      delay: 40

    - name: Refresh instance information
      amazon.aws.ec2_instance_info:
        region: "{{ aws_region }}"
        instance_ids: "{{ ec2.instance_ids }}"
      register: instance_info

    - name: Add new instances to host group
      add_host:
        hostname: "{{ item.public_ip_address }}"
        groups: launched
      loop: "{{ instance_info.instances }}"
      when: item.public_ip_address is defined

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_ip_address }}"
        port: 22
        delay: 60
        timeout: 600
        state: started
      loop: "{{ instance_info.instances }}"
      when: item.public_ip_address is defined

    - name: Write instance details to a file
      copy:
        content: |
          Instance ID: {{ item.instance_id }}
          Public IP: {{ item.public_ip_address }}
          Private IP: {{ item.private_ip_address }}
        dest: ~/instance_details.txt
        mode: '0644'
      loop: "{{ instance_info.instances }}"
      when: item.public_ip_address is defined

    - name: Allow HTTP and HTTPS access in the security group
      amazon.aws.ec2_group:
        name: "{{ aws_security_group }}"
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            ports:
              - 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
              - 443
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            ports: all
            cidr_ip: 0.0.0.0/0
        state: present

    - name: Create ELB
      amazon.aws.elb_load_balancer:
        name: ansible-elb
        state: present
        region: "{{ aws_region }}"
        zones:
          - "{{ aws_region }}a"
        listeners:
          - protocol: HTTP
            load_balancer_port: 80
            instance_port: 80
        health_check:
          ping_protocol: HTTP
          ping_port: 80
          ping_path: /
          response_timeout: 5
          interval: 30
          unhealthy_threshold: 2
          healthy_threshold: 2
        security_group_names: ["{{ aws_security_group }}"]
        wait: yes
      register: elb

    - name: Register instances with ELB
      amazon.aws.elb_instance:
        name: ansible-elb
        instances: "{{ ec2.instance_ids }}"
        state: present
        region: "{{ aws_region }}"

- name: Configure launched instances
  hosts: launched
  become: yes
  remote_user: ubuntu  # Use 'ubuntu' user for Ubuntu servers
  vars:
    ansible_ssh_private_key_file: ~/.ssh/{{ aws_key_file }}
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Nginx
      apt:
        name: nginx
        state: present

    - name: Start Nginx service
      service:
        name: nginx
        state: started
        enabled: yes
